<html>
<title>The Weekly Kettle Tip #5: Variables</title>
<body>
<H2>The Weekly Kettle tip : Variables</H2>

So there have been a lot of questions lately regarding ETL management issues like: how do I move files, how do I use parameters, etc.<br>
I'm happy to say that version 2.3.0 has gained a lot of functionality in that regard in the last 2 weeks.<br>
In fact I've been working very hard to not only add support for dynamically setting variables, but also in making these variables local to a job in order not to have them influence each other.  This is very important in the long run when we will be running several in-line jobs and transformations at the same time on the same virtual machine. (J2EE for example)<br>
<br>
<b>Please file bug reports for anything that doesn't work in your situation.  We will fix those issues before 2.3.0 is released.  Thank you in advance.  Filing bug reports really helps Kettle!</b>
<p>
<H3>What is a variable?</H3>

A variable used to be synonym for "environment variable".  You can use these in a lot of places in a transformation.
Most of the time the fields that support it have a "Variable" button next to it.<br>
Environment variables can still be used, but they are no longer the only option you have.  You can also set variables only for a certain parent job, grand-parent job or root job.<br>
Variables are accessed using this format:  
<br>
<li>${VariableName}  :  Unix style 
<li>%%VariableName%% :  Windows style
<p>
<I>Extra tip: you can set environment variables by defining a properties file in $HOME/.kettle/kettle.properties, using format VARIABLE=a certain value</I>
<H3>Todays example of variable use</H3>
This is a sample job that does the following:<p>
<li>Define a new variable TODAY  (20060523)
<li>Process all text files in a directory that ${TODAY} in the filename  (customer_01_20060523.txt)
<li>When all is processed correctly, move the files to the archive directory
<p>
<img src="./images/variables/job-overview.png" alt="Variables Job Overview" border=1>
<p>
This is the use-case of the example:<p>
<img src="./images/variables/files.png" alt="Variables Job Overview" border=1>


<H3>Setting the variables</H3>
To allow you to set variables dynamically we constructed a new step "Set Variables".  In the transformation shown below you can see how it's done.<br>
<I>Please note that the new "Set Environment Variables" step accepts exactly ONE row of data, no more.  That would not make sense.</I><br>
As you can see in the image, you can set the scope of the variable.<p>
<img src="./images/variables/set-variable.png" alt="Transformation to set variables">
<br>

<H3>Using the variables</H3>
Variables can be used in many steps, mostly there is a "Variable..." button present next to the field.<br>
The following 2 screenshots show the transformation and step that uses the variable we defined earlier:<p>
<img src="./images/variables/process-files.png" alt="Transformation processing files using a variable">
<br>
As you can see in this transformation we collect the processed file names and send them to the next job entry.<br>
Also, if you would run or preview this transformation in Spoon, a dialog will pop up to allow you to enter a value for TODAY.<br>
This way you can test the transformation without running the complete job.
<p>
<img src="./images/variables/text-file-input.png" alt="Text File Input step using a variable to search for files">
<br>
<H3>Moving files</H3>
When the previous transformation ran as expected (without errors) we can move the processed files to an archive directory<br>
For this, we use a very simple batch file with one line in it:<p>
<pre>
move %1 C:\testfiles\archive\
</pre>
Also note that there is a "Execute once for every input row" option enabled here that will execute this shell script once for every result row generated by the previous transformation.<p>
<img src="./images/variables/shell-dialog.png" alt="Shell job entry to move the files">
<br>
<i>Note: Contrary to what was the case in earlier versions, any output generated by the shell script will be "eaten" and put in the log as Basic logging.  I'm sure this will make many people's lives easier.</i>
<p>
I hope that this Kettle tip will once again clear up some questions and lead Kettle on a path to greater usability.<br>
In three simple job entries, we have implemented functionality that would otherwise take shell scripting to solve.<p>
I hope you found this Weekly Kettle Tip interesting.  Join us next time for more Kettle fun.<p>
Matt
</body>
</html>
