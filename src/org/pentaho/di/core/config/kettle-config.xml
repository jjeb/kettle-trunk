<kettle-config>

	<!--  This adds classes annotated with the @Step annotation as a Kettle step -->
	<config id="steps-annotation-config">
		<config-class>
			org.pentaho.di.core.config.AnnotatedStepsConfigManager
		</config-class>
		<!-- the packages to scan for the annotation.  Even though this is not required, it is advisable to enter a value here to
		avoid full classpath scanning.  Different packages can be separated by commas. Lastly, the scan IS RECURSIVE. -->
		<property name="packages" value="org.pentaho.di.trans" />
	</config>

	<!--  This reads the steps from the XML File defined below (configURL) -->
	<config id="steps-xml-config">
		<config-class>
			org.pentaho.di.core.config.DigesterConfigManager
		</config-class>

		<!-- Properties are automatically injected into fields/methods of the above class annotated with @Inject -->
		<property name="configURL" value="kettle-steps.xml" />
		<property name="rulesURL"
			value="org/pentaho/di/core/config/steps-rules.xml" />
		<property name="setNext" value="steps/step" />
	</config>



	<!--  THIS IS JUST TO SHOW HOW WE COULD HAVE A CONFIGURATION MANAGER IMPLEMENTED AS A DATABASE REPOSITORY.
		<config id="db-config">
		<config-class>org.pentaho.di.core.config.DatabaseConfigManager</config-class>
		<property name="connectionURL" value="jdbc:oracle:thin:@192.168.1.11:1521:kettle"/>
		<property name="table" value="KETTLE_CONFIG"/>
		<property name="columns" value="COL1,COL2,COL3"/>
		</config>
	-->

</kettle-config>


