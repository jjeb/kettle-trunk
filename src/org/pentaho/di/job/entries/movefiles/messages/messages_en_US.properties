#File generated by Pentaho Transator for package 'org.pentaho.di.job.entries.MoveFiles' in locale 'en_US'


#Mon Oct 08 14:12:56 CEST 2007
JobMoveFiles.Log.ArgFromPrevious.Found=found [{0}] argument(s) from previous result
JobMoveFiles.Tab.General.Label=General
JobMoveFiles.BrowseFiles.Label=File...
JobMoveFiles.Error.Exception.MoveProcessError=There was an error moving file [{0}] to [{1}] \: [{2}]
JobMoveFiles.Fields.Label=Files/Folders\: 
JobMoveFiles.Filetype.All=All files
JobMoveFiles.SourceFileFolder.Tooltip=Enter here the file or folder to move\n If it's a folder, check ''Include subfolders'' option if necessary\!
JobMoveFiles.Fields.Wildcard.Tooltip=Specify here the wildcard to match.\n Only files that match the wildcard will be moved.
JobMoveFiles.DestinationFileFolder.Tooltip=Enter here the destination folder to hit.\n If you selected file as source,you can define a file as destination.
JobMoveFiles.Error.DestinationFolderNotFound=Destination folder does not exist\!
JobMoveFiles.Log.FileOverwrite=File [{0}] was overwritten
JobMoveFiles.DestinationIsAFile.Tooltip=PDI will consider that destination is a file.
JobMoveFiles.Error.Exception.MoveProcess=Can not move file/folder [{0}] to [{1}]. Exception \: [{2}]
JobMoveFiles.FilenameDelete.Button=&Delete
JobMoveFiles.Log.FolderMoved=Folder [{0}] was moved to [{1}]
JobMoveFiles.Fields.DestinationFileFolder.Label=File/Folder destination

JobMoveFiles.Log.FileMoved=File [{0}] was moved to [{1}] 
JobMoveFiles.FilenameAdd.Button=&Add
JobMoveFiles.Title=Move files...
JobMoveFiles.Log.FetchFolder=Fetching folder [{0}]
JobMoveFiles.Error.SourceFileNotExists=File/folder [{0}] does not exists\!
JobMoveFiles.FilenameEdit.Button=&Edit
JobMoveFiles.RemoveSourceFiles.Tooltip=Remove source files after moving process\nOnly files will be removed.
JobMoveFiles.CreateDestinationFolder.Label=Create destination folder
JobMoveFiles.Log.ProcessingRow=Processing row source File/folder source \: [{0}] ... destination file/folder \: [{1}]... wilcard \: [{2}]

JobMoveFiles.Log.FileFolderRemoved=File/folder [{0}] was deleted
JobMoveFiles.Log.CanNotMoveFolderToFile=Can not move folder [{0}] to file [{1}]
JobMoveFiles.IncludeSubfolders.Label=Include Subfolders
JobMoveFiles.Log.Forbidden=FORBIDDEN
JobMoveFiles.AddFileToResult.Label=Add files to result files name
JobMoveFiles.FilenameEdit.Tooltip=Edit selected files
JobMoveFiles.Log.FolderOverwriteInfos=Folder
JobMoveFiles.Log.FileRemovedInfos=file deleted
JobMoveFiles.MoveEmptyFolders.Label=Move empty folders
JobMoveFiles.DestinationIsAFile.Label=Destination is a file
JobMoveFiles.RemoveSourceFiles.Label=Remove source files
JobMoveFiles.Fields.Wildcard.Label=Wildcard
JobMoveFiles.OverwriteFiles.Tooltip=When the destination file exists,If you want to replace it check this option.\nOtherwise, PDI will ignore it.
JobMoveFiles.Log.FileAddedToResultFilesName=File [{0}] was added to result filesname
JobMoveFiles.Error.Exception.CanRemoveFileFolder=Can not delete file/folder [{0}]
JobMoveFiles.MoveEmptyFolders.Tooltip=Move empty folders\n Will work only when no wildcard was specified and ''Include subfolders'' is checked\!
JobMoveFiles.FileResult.Group.Label=Result files name
JobMoveFiles.Error.Exception.UnableSaveRep=Unable to save job entry of type ''MoveFiles'' to the repository for id_job\=
JobMoveFiles.Log.Error=Error while processing : {0}
JobMoveFiles.FilenameDelete.Tooltip=Remove selected files from the grid
JobMoveFiles.OverwriteFiles.Label=Replace existing files
JobMoveFiles.Log.FolderOverwrite=Folder [{0}] was overwritten
JobMoveFiles.CreateDestinationFolder.Tooltip=Create destination folder if necessary.\nIf destination is a file, parent folder will be created if necessary.
JobMoveFiles.Wildcard.Tooltip=Specify here the wildcard to match.\n Only files that match the wildcard will be moved.
JobMoveFiles.Fields.DestinationFileFolder.Tooltip=Enter here the destination folder to hit.\n If you selected file as source,you can define a file as destination.
JobMoveFiles.Previous.Tooltip=Check this to pass the results of the previous entry to the arguments of this entry.\nBe careful, arguments must be in the same order that arguments\!\n ie \: (1) source folder/file, (2) destination folder/file, (3) wildcard
JobMoveFiles.Settings.Label=Settings
JobMoveFiles.Name.Label=Job entry name\: 
JobMoveFiles.Error.Exception.UnableLoadXML=Unable to load job entry of type ''MoveFiles'' from XML node
JobMoveFiles.Name.Default=Move files
JobMoveFiles.Log.FolderExists=Folder [{0}] exists\!
JobMoveFiles.Previous.Label=Copy previous results to args
JobMoveFiles.Log.FileExists=file [{0}] exists\!
JobMoveFiles.Tab.Advanced.Label=Advanced
JobMoveFiles.Error.Exception.UnableLoadRep=Unable to load job entry of type ''MoveFiles'' from the repository for id_jobentry\=
JobMoveFiles.Fields.SourceFileFolder.Tooltip=Enter here the file or folder to move\n If it's a folder, PDI will fetch only if ''Include subfolders'' is checked\!
JobMoveFiles.Log.IgnoringRow=Ignoring row with source or destination is NULL. Source File/folder source \: [{0}], destination file/folder \: [{1}], wilcard \: [{2}]
JobMoveFiles.DestinationFileFolder.Label=File/Folder destination
JobMoveFiles.Log.FileFolderRemovedInfos=File/folder deleted
JobMoveFiles.BrowseFolders.Label=Folder...
JobMoveFiles.IncludeSubfolders.Tooltip=Check this if you want to fetch also sub folders\nThis option will work only when the source is a folder.
JobMoveFiles.SourceFileFolder.Label=File/Folder source
JobMoveFiles.Wildcard.Label=Wildcard
JobMoveFiles.AddFileToResult.Tooltip=Add destination files to result files name.\nIt is helpful if you want to attach theses files to an email thanks to send mail job entry.
JobMoveFiles.Fields.SourceFileFolder.Label=File/Folder source
JobMoveFiles.Error.AddingToFilenameResult=Error adding filename [{0}] to result filesname. Exception : {1}

JobMoveFiles.SuccessOn.Group.Label=Success On
JobMoveFiles.Log.FolderNotExist=Folder {0} does not exist !
JobMoveFiles.Log.FolderWasCreated=Parent folder {0} was created.
JobMoveFiles.Log.CanNotCreateParentFolder=Could not create parent folder {0}!
JobMoveFiles.SuccessCondition.Label=Success condition 
JobMoveFiles.SuccessWhenAllWorksFine.Label=Success when all works fine
JobMoveFiles.SuccessWhenErrorsLessThan.Label=Success when number of errors lesser than 
JobMoveFiles.NrErrorsLessThan.Label=Nr errors lesser than
JobMoveFiles.NrErrorsLessThan.Tooltip=Success when Number of errors is lesser than

JobMoveFiles.DoNotProcessRest.Label=Ignore rest of files
JobMoveFiles.DoNotProcessRest.Tooltip=If you check this option, PDI will not process files left\nif success condition is broken
JobMoveFiles.GroupDestinationFile.Label=Destination file
JobMoveFiles.AddDate.Label=Add date to filename
JobMoveFiles.AddDate.Tooltip=Add date to filename
JobMoveFiles.AddTime.Label=Add time to filename
JobMoveFiles.AddTime.Tooltip=Add time to filename
JobMoveFiles.SpecifyFormat.Label=Specify Date time format
JobMoveFiles.SpecifyFormat.Tooltip=Specify Date time format
JobMoveFiles.DateTimeFormat.Label=Date time format
JobMoveFiles.AddDateBeforeExtension.Label=Add date before extension
JobMoveFiles.AddDateBeforeExtension.Tooltip=If you select this option, PDI will add date (and time) before file extension.\nThe extension will be considered starting from the last ''.'' found.
JobMoveFiles.Error.GettingFilename=Error getting filename for file [{0}]. Exception : {1}
JobEntryMoveFiles.log.IgnoringFile=Ignoring file [{0}] ...
JobMoveFiles.DoNotKeepFolderStructure.Label=Do not keep folder structure
JobMoveFiles.DoNotKeepFolderStructure.Tooltip=Check this option if you want to move files to\n destination file without keeping folders structure.