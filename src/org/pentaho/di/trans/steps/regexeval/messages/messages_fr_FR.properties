#####################################################################
##
##  RegexEval
##
#####################################################################

RegexEval.Log.ErrorStackTrace=Error stack trace: 
RegexEval.Log.LineNumber=linenr 
RegexEval.Log.StartingToRun=Starting to run...
RegexEval.Log.UnexpectedeError=Unexpected error in ''
RegexEval.Log.ErrorFindingField = Error finding field: 
RegexEval.Exception.CouldnotFindField = Couldn''t find field ''{0}'' in row!
RegexEval.Log.ErrorMatcherMissing = Error missing Field to evaluate
RegexEval.Exception.ErrorMatcherMissing = Error missing Field to evaluate
RegexEval.Log.ErrorResultFieldMissing = Error result Field is missing
RegexEval.Exception.ErrorResultFieldMissing = Error result Field is missing
RegexEval.Log.ReadRow = Reading row : 
RegexEval.Log.Regexp = The regular expression is : 

#####################################################################
##
##  RegexEvalDialog
##
#####################################################################
RegexEvalDialog.Shell.Title=Evaluation par Regex
RegexEvalDialog.Stepname.Label=Nom étape 
RegexEvalDialog.Javascript.Label=Expression régulière:
RegexEvalDialog.Script.Label=Expression régulière  

RegexEvalDialog.FailedToGetFields.DialogMessage=Unable to get fields from previous steps because of an error
RegexEvalDialog.Exception.CouldNotExecuteScript=Couldn''t execute this script\! Error:
RegexEvalDialog.Exception.CouldNotExecuteScript2=General error executing script:
RegexEvalDialog.Exception.CouldNotCompileScript=Couldn''t compile this script\! Error:
RegexEvalDialog.Exception.CouldNotGetFields=Couldn''t get fields from previous steps, please connect all needed hops\!

RegexEvalDialog.CompiledScriptOK.DialogTitle=OK
RegexEvalDialog.ErrorDialog.Title=ERROR

RegexEvalDialog.TestFailed.DialogMessage=Unable to get fields from previous steps because of an error
RegexEvalDialog.Matcher.Label = Field to evaluate
RegexEvalDialog.ResultField.Label = Result Fieldname
RegexEvalDialog.ResultField.Tooltip = Result Field Name to add to output stream

RegexEvalDialog.CanonEq.Label = Ignore differences in Unicode encodings
RegexEvalDialog.CanonEq.Tooltip = CANON_EQ to ignore differences in Unicode encodings,\n unless you are sure your strings contain only US ASCII characters and you want to increase performance.

RegexEvalDialog.CaseInsensitive.Label = Enables case-insensitive matching
RegexEvalDialog.CaseInsensitive.Tooltip = CASE_INSENSITIVE to enables case-insensitive.\nBy default, case-insensitive matching assumes that only characters in the US-ASCII charset are being matched.\n Unicode-aware case-insensitive matching can be enabled by specifying the UNICODE_CASE flag in conjunction with this flag.\nCase-insensitive matching can also be enabled via the embedded flag expression (?i).

RegexEvalDialog.Comment.Label = Permit whitespace and comments in pattern
RegexEvalDialog.Comment.Tooltip = In this mode, whitespace is ignored,\n and embedded comments starting with # are ignored until the end of a line.\nComments mode can also be enabled via the embedded flag expression (?x).

RegexEvalDialog.DotAll.Label = Enable dotall mode
RegexEvalDialog.DotAll.Tooltip = In dotall mode, the expression . matches any character, including a line terminator.\n By default this expression does not match line terminators.\nDotall mode can also be enabled via the embedded flag expression (?s).

RegexEvalDialog.Multiline.Label = Enable multiline mode
RegexEvalDialog.Multiline.Tooltip = In multiline mode the expressions ^ and $ match just after or just before,\n respectively, a line terminator or the end of the input sequence.\n By default these expressions only match at the beginning and the end of the entire input sequence.\nMultiline mode can also be enabled via the embedded flag expression (?m).

RegexEvalDialog.Unicode.Label = Enable Unicode-aware case folding
RegexEvalDialog.Unicode.Tooltip = When this flag is specified then case-insensitive matching,\n when enabled by the CASE_INSENSITIVE flag, is done in a manner consistent with the Unicode Standard.\n By default, case-insensitive matching assumes that only characters in the US-ASCII charset are being matched.\nUnicode-aware case folding can also be enabled via the embedded flag expression (?u).

RegexEvalDialog.Unix.Label = Enables Unix lines mode
RegexEvalDialog.Unix.Tooltip =In this mode, only the '\n' line terminator is recognized in the behavior of ., ^, and $.\nnix lines mode can also be enabled via the embedded flag expression (?d).


RegexEvalDialog.GeneralTab.TabTitle = Settings
RegexEvalDialog.ContentTab.TabTitle = Content

RegexEvalDialog.UseVar.Label = Use variable substitution
RegexEvalDialog.UseVar.Tooltip = Use variable substitution

#####################################################################
##
##  RegexEvalMeta
##
#####################################################################
RegexEvalMeta.Exception.UnableToLoadStepInfoFromXML=Unable to load step info from XML
RegexEvalMeta.Exception.UnexpectedErrorInReadingStepInfo=Unexpected error reading step information from the repository
RegexEvalMeta.Exception.UnableToSaveStepInfo=Unable to save step information to the repository for id_step=
RegexEvalMeta.CheckResult.ConnectedStepOK=Step is connected to previous one, receiving {0} fields
RegexEvalMeta.CheckResult.ScriptCompiledOK=Script compiled without a problem
RegexEvalMeta.CheckResult.ScriptCompiledOK2=Script executed without a problem
RegexEvalMeta.CheckResult.FailedToGetValues=Trying to retrieve {0} fields: 
RegexEvalMeta.CheckResult.CouldNotExecuteScript=Couldn''t execute this script\! Error:
RegexEvalMeta.CheckResult.CouldNotExecuteScript2=General error executing script:

RegexEvalMeta.CheckResult.CouldNotGetFieldsFromPreviousStep=Couldn''t get fields from previous steps, please connect all needed hops\!
RegexEvalMeta.CheckResult.ConnectedStepOK2=Step is receiving info from other steps.
RegexEvalMeta.CheckResult.NoInputReceived=No input received from other steps\!
RegexEvalMeta.CheckResult.ErrorRetrievingValue=Error retrieving value {0}
RegexEvalMeta.CheckResult.RetrievedValue=\ - Retrieved value {0} of type {1}
RegexEvalMeta.CheckResult.ValueIsEmpty=Error: value \#{0} is empty!

RegexEvalMeta.CheckResult.ResultFieldnameOK=Result field name is filled
RegexEvalMeta.CheckResult.NoResultFieldname= Result field name is missing!

RegexEvalMeta.CheckResult.MatcherOK=Field to evaluate is filled
RegexEvalMeta.CheckResult.NoMatcher= Field to evaluate is missing!
