#File generated by Pentaho Transator for package 'org.pentaho.di.trans.steps.regexeval' in locale 'en_US'


#Wed Oct 03 22:41:33 CEST 2007
RegexEval.Exception.CouldnotFindField=Couldn''t find field ''{0}'' in row\!
RegexEvalDialog.ResultField.Label=Result Fieldname
RegexEval.Log.LineNumber=linenr 
RegexEvalDialog.DotAll.Label=Enable dotall mode
RegexEvalDialog.GeneralTab.TabTitle=Settings
RegexEvalMeta.Exception.UnexpectedErrorInReadingStepInfo=Unexpected error reading step information from the repository
RegexEvalDialog.Unix.Tooltip=In this mode, only the '\n' line terminator is recognized in the behavior of ., ^, and $.\nnix lines mode can also be enabled via the embedded flag expression (?d).
RegexEvalMeta.CheckResult.RetrievedValue=\ - Retrieved value {0} of type {1}
RegexEvalDialog.Unicode.Label=Enable Unicode-aware case folding
RegexEvalDialog.Multiline.Label=Enable multiline mode
RegexEvalDialog.FailedToGetFields.DialogTitle=Error getting fields
RegexEvalDialog.TestFailed.DialogMessage=Unable to get fields from previous steps because of an error
RegexEvalMeta.CheckResult.NoInputReceived=No input received from other steps\!
RegexEvalDialog.ErrorDialog.Title=ERROR
RegexEval.Log.UnexpectedeError=Unexpected error in ''
RegexEvalDialog.CanonEq.Label=Ignore differences in Unicode encodings
RegexEvalMeta.Exception.UnableToSaveStepInfo=Unable to save step information to the repository for id_step\=
RegexEvalDialog.CaseInsensitive.Tooltip=CASE_INSENSITIVE to enables case-insensitive.\nBy default, case-insensitive matching assumes that only characters in the US-ASCII charset are being matched.\n Unicode-aware case-insensitive matching can be enabled by specifying the UNICODE_CASE flag in conjunction with this flag.\nCase-insensitive matching can also be enabled via the embedded flag expression (?i).
RegexEval.Exception.ErrorMatcherMissing=Error missing Field to evaluate
RegexEvalDialog.Stepname.Label=Step name 
RegexEvalMeta.CheckResult.ScriptCompiledOK=Script compiled without a problem
RegexEvalDialog.Comment.Label=Permit whitespace and comments in pattern
RegexEvalDialog.UseVar.Tooltip=Use variable substitution
RegexEvalDialog.Matcher.Label=Field to evaluate
RegexEval.Log.ReadRow=Reading row \: 
RegexEvalMeta.CheckResult.ConnectedStepOK=Step is connected to previous one, receiving {0} fields
RegexEvalDialog.Exception.CouldNotExecuteScript2=General error executing script\:
RegexEvalDialog.Multiline.Tooltip=In multiline mode the expressions ^ and $ match just after or just before,\n respectively, a line terminator or the end of the input sequence.\n By default these expressions only match at the beginning and the end of the entire input sequence.\nMultiline mode can also be enabled via the embedded flag expression (?m).
RegexEvalDialog.Unix.Label=Enables Unix lines mode
RegexEvalMeta.CheckResult.ResultFieldnameOK=Result field name is filled
RegexEvalDialog.CaseInsensitive.Label=Enables case-insensitive matching
RegexEvalDialogMod.FailedToGetFields.DialogMessage=There was an error getting the input fields\:
RegexEvalDialog.CanonEq.Tooltip=CANON_EQ to ignore differences in Unicode encodings,\n unless you are sure your strings contain only US ASCII characters and you want to increase performance.
RegexEvalDialog.ContentTab.TabTitle=Content
RegexEval.Exception.ErrorResultFieldMissing=Error result Field is missing
RegexEvalDialog.Shell.Title=Regex evaluation
RegexEvalDialog.Exception.CouldNotExecuteScript=Couldn''t execute this script\! Error\:
RegexEvalDialog.CompiledScriptOK.DialogTitle=OK
RegexEval.Log.ErrorResultFieldMissing=Error result Field is missing
RegexEval.Log.ErrorMatcherMissing=Error missing Field to evaluate
RegexEval.Log.ErrorFindingField=Error finding field\: 
RegexEvalDialog.ResultField.Tooltip=Result Field Name to add to output stream
RegexEvalMeta.CheckResult.NoMatcher=Field to evaluate is missing\!
RegexEvalMeta.CheckResult.ScriptCompiledOK2=Script executed without a problem
RegexEvalDialog.Script.Label=Regular expression  
RegexEval.Log.ErrorStackTrace=Error stack trace\: 
RegexEvalDialog.DotAll.Tooltip=In dotall mode, the expression . matches any character, including a line terminator.\n By default this expression does not match line terminators.\nDotall mode can also be enabled via the embedded flag expression (?s).
RegexEvalMeta.CheckResult.ConnectedStepOK2=Step is receiving info from other steps.
RegexEvalMeta.CheckResult.CouldNotGetFieldsFromPreviousStep=Couldn''t get fields from previous steps, please connect all needed hops\!
RegexEvalMeta.CheckResult.CouldNotExecuteScript=Couldn''t execute this script\! Error\:
RegexEvalMeta.CheckResult.FailedToGetValues=Trying to retrieve {0} fields\: 
RegexEvalDialog.Exception.CouldNotCompileScript=Couldn''t compile this script\! Error\:
RegexEval.Log.Regexp=The regular expression is \: 
RegexEvalDialog.UseVar.Label=Use variable substitution
RegexEvalDialog.Unicode.Tooltip=When this flag is specified then case-insensitive matching,\n when enabled by the CASE_INSENSITIVE flag, is done in a manner consistent with the Unicode Standard.\n By default, case-insensitive matching assumes that only characters in the US-ASCII charset are being matched.\nUnicode-aware case folding can also be enabled via the embedded flag expression (?u).
RegexEvalDialog.Javascript.Label=Regular expression \:
RegexEvalMeta.CheckResult.ErrorRetrievingValue=Error retrieving value {0}
RegexEvalMeta.Exception.UnableToLoadStepInfoFromXML=Unable to load step info from XML
RegexEvalDialog.FailedToGetFields.DialogMessage=Unable to get fields from previous steps because of an error
RegexEvalDialog.Comment.Tooltip=In this mode, whitespace is ignored,\n and embedded comments starting with \# are ignored until the end of a line.\nComments mode can also be enabled via the embedded flag expression (?x).
RegexEvalDialog.Exception.CouldNotGetFields=Couldn''t get fields from previous steps, please connect all needed hops\!
RegexEvalMeta.CheckResult.MatcherOK=Field to evaluate is filled
RegexEvalMeta.CheckResult.CouldNotExecuteScript2=General error executing script\:
RegexEval.Log.StartingToRun=Starting to run...
RegexEvalMeta.CheckResult.ValueIsEmpty=Error\: value \#{0} is empty\!
RegexEvalMeta.CheckResult.NoResultFieldname=Result field name is missing\!
