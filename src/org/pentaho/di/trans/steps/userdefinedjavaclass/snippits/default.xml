<snippits>
    <snippit>
        <name>Hello World example</name>
        <description>A simple processRows that optionally reads an input String field and writes it to a new output String</description>
        <code><![CDATA[
// FieldHelpers are currently used to be able to easily retrieve or set a field from a row
public static class Fields {
	public static class In { public static FieldHelper a_field; }
	public static class Out { public static FieldHelper a_new_field; }
}

public boolean processRow(StepMetaInterface smi, StepDataInterface sdi) throws KettleException
{

    // First, get a row from the default input hop
	Object[] r = getRow();

    // If the row object is null, we are done processing.
	if (r == null) {
		setOutputDone();
		return false;
	}

    // If the global "first" flag is true, perform some initialization that can only happen
    // once we have read the first row of input data
    if (first)
    {
        first = false;

        // Set up the list of fields that will be available after this step
		data.outputRowMeta = getInputRowMeta().clone();
		meta.getFields(data.outputRowMeta, getStepname(), null, null, parent);

        // Initialize our field helpers to look for the fields in the row meta by name.
        // Fields.In.rownum = new FieldHelper(data.inputRowMeta, "a_field");
		Fields.Out.fib = new FieldHelper(data.outputRowMeta, "a_new_field");
	}

    String output;
    // The if clause is because you might not have a field named "a_field" right now.
    if (Fields.In.a_field != null) {
        output = Fields.In.a_field.getString(r);
    } else {
        output = "Hello World";
    }

    // setValue takes an Object and stores it in the correct spot in the row array for this field.
    // You are responsible for making sure the Object is of the correct type for the field.
    Fields.Out.a_new_field.setValue(r, output);

    // putRow will send the row on to the default output hop.
    putRow(data.outputRowMeta, r);

    // This method will be continuously called until it returns false (i.e. when all rows are processed).
	return true;
}
]]></code>
    </snippit>
    <snippit>
        <name>Simple processRows()</name>
        <description>A default implementation of processRows useful as a template for getting started</description>
        <code><![CDATA[
// FieldHelpers are currently used to be able to easily retrieve or set a field from a row
public static class Fields {
	public static class In { public static FieldHelper a_field; }
	public static class Out { public static FieldHelper a_new_field; }
}

public boolean processRow(StepMetaInterface smi, StepDataInterface sdi) throws KettleException
{

    // First, get a row from the default input hop
	Object[] r = getRow();

    // If the row object is null, we are done processing.
	if (r == null) {
		setOutputDone();
		return false;
	}

    // If the global "first" flag is true, perform some initialization that can only happen
    // once we have read the first row of input data
    if (first)
    {
        first = false;

        // Set up the list of fields that will be available after this step
		data.outputRowMeta = getInputRowMeta().clone();
		meta.getFields(data.outputRowMeta, getStepname(), null, null, parent);

        // Initialize our field helpers to look for the fields in the row meta by name.
        // Fields.In.rownum = new FieldHelper(data.inputRowMeta, "a_field");
		Fields.Out.fib = new FieldHelper(data.outputRowMeta, "a_new_field");
	}

    String output;
    // The if clause is because you might not have a field named "a_field" right now.
    if (Fields.In.a_field != null) {
        output = Fields.In.a_field.getString(r);
    } else {
        output = "Hello World";
    }

    // setValue takes an Object and stores it in the correct spot in the row array for this field.
    // You are responsible for making sure the Object is of the correct type for the field.
    Fields.Out.a_new_field.setValue(r, output);

    // putRow will send the row on to the default output hop.
    putRow(data.outputRowMeta, r);

    // This method will be continuously called until it returns false (i.e. when all rows are processed).
	return true;
}
]]></code>
        <fields>
            <field>
                <field_name>a_new_field</field_name>
                <field_type>String</field_type>
                <field_length>-1</field_length>
                <field_precision>-1</field_precision>
            </field>
        </fields>
    </snippit>
</snippits>
