<!--===========================================================================
  This is the build file for the Pentaho Data Integration (Kettle) core module.
  
  This build file will use the subfloor.xml file as the default build
  process and should only override the tasks that need to differ from
  the common build file.
  
  See common_build.xml for more details
============================================================================-->
<project name="kettle-core" basedir="." default="default">

  <description>
    This build file is used to create the API project
    and works with the subfloor.xml file.
  </description>

  <!-- The continuous target is used by CI ... this is the list of -->
  <!-- tasks that the CI machine will run.                         -->
  <!-- DO NOT change the CI machine's ant task .. change this list -->
  <target name="continuous" 
          depends="clean-all,resolve,publish" />

  <!-- Import the common_build.xml file which contains all the default tasks -->
  <import file="build-res/subfloor.xml"/>

    <!--
      AS STATED ABOVE, THE ONLY TASKS THAT SHOULD EXIST IN THIS BUILD FILE ARE
      THE TASKS THAT NEED TO DIFFER FROM THE DEFAULT IMPLEMENTATION OF THE TASKS
      FOUND IN common_build.xml.
    --> 
    
	<target name="create-dot-classpath" depends="init,resolve,subfloor.create-dot-classpath"/>
	
	<target name="default" depends="clean,init,resolve,dist"/>
	    
  <target name="set-revision">
    <condition property="revision" value="${svn-revision}" else="1">
        <length string="${svn-revision}" length="7" when="less"/>
    </condition>
    
    <echo message="Revision set to r${revision}"/>
  </target>

  <!--=======================================================================
      generate.manifest
      
      Creates a new manifest file if one is not specified, or updates
      an existing manifest file if one is specified.
      ====================================================================-->
  <target name="generate.manifest" depends="init,set-build.id,set-revision">
    <delete file="${dist.manifest.file}" />
    <touch file="${dist.manifest.file}" />
    <copy file="${manifest.file}" tofile="${dist.manifest.file}" overwrite="true" failonerror="false" />

    <manifest file="${dist.manifest.file}" mode="update">
      <attribute name="Implementation-Title" value="${impl.title}" />
      <attribute name="Implementation-Version" value="${impl.version}" />
      <attribute name="Specification-Version" value="${revision}" />
      <attribute name="Implementation-Vendor" value="${impl.vendor}" />
      <attribute name="Implementation-ProductID" value="${impl.productID}" />
      <attribute name="Compile-Timestamp" value="${compile.timestamp}" />
      <attribute name="Compile-User" value="${user.name}" />
    </manifest>
  </target>

</project>
